openapi: "3.0.0"
info:
  version: 1.0.0
  title: eGov Encryption Service
  description: API for encryption / decryption
  contact:
    name: Egovernments Foundation
    email: contact@egovernments.org

paths:

  /crypto/v1/_encrypt:
    post:
      summary: Encrypts the given input value/s OR values of the object.
      requestBody:
        description: The request body can contain an array of Encryption Requests to support bulk encryption. The key for encryption will be decided based on the tenantId. Each tenant will have its own seperate key. The value to be encrypted can be simple string OR an array of string OR can be a JSON Object. In case the value is a JSON Object, all the values will get encrypted and keys will be left untouched. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EncryptionRequest'
            example:
              {
                "encryptionRequests": [
                  {
                    "tenantId": "pb.amritsar",
                    "method": "RSA",
                    "value": "My email"
                  },
                  {
                    "tenantId": "pb.jalandhar",
                    "method": "AES",
                    "value": ["Personal", "Private"]
                  },
                  {
                    "tenantId": "pb.mohali",
                    "method": "AES",
                    "value": {
                      "userObject1": {
                        "name": "John Doe",
                        "mobileNumber": "98989121234"
                      }
                    }
                  }
                ]
              }

      responses:
        '200':
          description: The returned encrypted value will have the same structure as the input value.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              example:
                  [
                    "RSA|3|BHLPVVOVOc7riJW4Gs4gLKUaqXIqNkvUKy30rWeEkMbukF8SfaFGJ9YaYSHv0a1lVv2iwRr26kN0QxKZsJJ3YEU+k/jlkWca+u+2T8M4MOvIRbpsrnYYw4hVE20WT4+8WbH39aAPGkMFXTwU7M+LNpCiAl+NxJPUiq7i8QJhIsc=",
                    [
                      "AES|1|xOWbq7hJ2wFxy+oM3O3/dQ==",
                      "AES|1|w7xMbg4NjAiFMHwGODkjUQ=="
                    ],
                    {
                      "userObject1": {
                          "mobileNumber": "AES|5|AUKQyq2zI8zRs5XBNItmqA==",
                          "name": "AES|5|BYUUZld7gXDYvfSIKCHbSw=="
                      }
                    }
                  ]


      tags:
        - Crypto

  /crypto/v1/_decrypt:
    post:
      summary: Decrypts the given input value/s OR values of the object.
      requestBody:
        description: Input to a decryption request may be an simple string OR an array OR a JSON Object. Every Object/Array will be navigated through to find simple strings, and those strings will be decrypted.
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
            example:
               [
                    {
                      "userObject1": {
                          "mobileNumber": "AES|5|AUKQyq2zI8zRs5XBNItmqA==",
                          "name": "AES|5|BYUUZld7gXDYvfSIKCHbSw=="
                      }
                    },
                    [
                      "AES|1|xOWbq7hJ2wFxy+oM3O3/dQ==",
                      "AES|1|w7xMbg4NjAiFMHwGODkjUQ=="
                    ]
                  ]

      responses:
        '200':
          description: The response to a decryption request will have the same structure as the input.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              example:
                [
                  {
                      "userObject1": {
                          "mobileNumber": "98989121234",
                          "name": "John Doe"
                      }
                  },
                  [
                      "Personal",
                      "Private"
                  ]
                ]


      tags:
        - Crypto


components:
  schemas:

    EncReqObject:
      type: object
      description: EncrReqObject contains data to be encrypted and meta-data required to perform the encryption.
      properties:
        tenantId:
          type: string
          description: Encryption Key will be decided based on tenant id.
        method:
          type: string
          description: Method to be used for encryption ( AES / RSA )
          enum:
          - AES
          - RSA
        value:
          type: array
          description: Value/s to be encrypted. Can be a string or object or array
          items: {}
          example: ["Personal", "Private"]

      example:
          tenantId: "pb.jalandhar"
          method: "AES"
          value: {
            "key": "secret"
          }



    EncryptionRequest:
      type: object
      description: An encryption request can contain multiple EncReqObject. This will help to encrypt bulk requests which may have different tenant-id and/or method ( AES / RSA ).
      properties:
        encryptionRequests:
          type: array
          items: 
            $ref: '#/components/schemas/EncReqObject'
      example:
        {
          "encryptionRequests": [
              {
                "tenantId": "pb.amritsar",
                "method": "RSA",
                "value": {
                  "key": "secret"
                }
              }
            ]
        }